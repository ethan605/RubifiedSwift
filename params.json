{
  "name": "RubifiedSwift",
  "tagline": "Bunch of Swift extensions for Number, String, Array, Dictionary... inspired by Ruby-styled implementations",
  "body": "# RubifiedSwift\r\n### Bunch of Swift extensions for Number, String, Array, Dictionary... written in Ruby-styled implementations.\r\n\r\nInspired by [ObjectiveSugar](https://github.com/supermarin/ObjectiveSugar) & [RubySugar](https://github.com/michalkonturek/RubySugar)\r\n\r\n## Installation\r\n\r\n### [Cocoapods][]\r\n\r\nAdd the following line to your [Podfile][]:\r\n\r\n````ruby\r\npod 'RubifiedSwift', '~> 0.9.0'\r\n````\r\n\r\nMake sure to add the line `use_frameworks!` to your Podfile or target to opt into frameworks instead of static libraries.\r\n\r\nThen run `pod install` to install the latest version of the framework.\r\n\r\n## Usage\r\n\r\nMost of **Ruby** functions are written in 2 common styles: **immutable** functions in normal way and **mutable** functions ending with exclaimation mark (`!`). Unfortunately, in **Swift**, `!` is reserved keyword for **unwrapped** values. So **RubifiedSwift** use `$` at the end of **mutable** functions to preserve **Ruby** style at its best.\r\n\r\n### Array extensions\r\n\r\n```swift\r\nvar array = [1, 2, 3, 4]\r\n\r\narray.at(2)          // 3\r\narray.at(-3)         // 2\r\n\r\narray.push(5)               // [1, 2, 3, 4, 5]\r\narray.push(6, 7)            // [1, 2, 3, 4, 5, 6, 7]\r\narray.unshift(0)            // [0, 1, 2, 3, 4, 5, 6, 7]\r\narray.unshift(-2, -1)       // [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]\r\n\r\narray.pop()           // 7\r\narray                 // [-2, -1, 0, 1, 2, 3, 4, 5, 6]\r\narray.shift()         // -2\r\narray                 // [-1, 0, 1, 2, 3, 4, 5, 6]\r\n\r\narray.join()          // \"-10123456\"\r\narray.join(\" \")       // \"-1 0 1 2 3 4 5 6\"\r\n\r\narray.map$ { $0 * 2 }\r\narray                 // [-2, 0, 2, 4, 6, 8, 10, 12]\r\n\r\narray.select { $0 % 3 == 0 }      // [6, 12]\r\nvar arr = array\r\narr.select$ { $0 % 3 == 0 }\r\narr                               // [6, 12]\r\n\r\narray.reject { $0 % 4 == 0 }      // [-2, 2, 6, 10]\r\narr = array\r\narr.reject$ { $0 % 4 == 0 }\r\narr                               // [-2, 2, 6, 10]\r\n\r\narr = array\r\narr.deleteIf { $0 % 5 == 0 }\r\narr                               // [-2, 2, 4, 6, 8, 12]\r\n\r\narr = array\r\narr.keepIf { $0 % 5 == 0 }\r\narr                               // [0, 10]\r\n\r\n[1, 2, 3].permutation()           // [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\r\n\r\narray.max()                       // 12\r\narray.min()                       // -2\r\n\r\narr = array\r\narr.delete(5)                     // nil\r\narr.delete(2)                     // Optional(2)\r\n\r\narr = [1, 1, 2, 3, 4, 4]\r\narr.uniq()                       // [1, 2, 3, 4]\r\narr.uniq$()\r\narr                              // [1, 2, 3, 4]\r\n\r\n[1, 2, 3, 4].eachWithIndex { (element, index) in\r\n  print(\"\\(index). \\(element)\")\r\n}\r\n\r\n[1, 2, 3, 4].mapWithIndex { (element, index) in\r\n  index * element\r\n}                                 // [0, 2, 6, 12]\r\n\r\narr = [1, 2, 3, 4]\r\narr << 5                          // [1, 2, 3, 4, 5]\r\n\r\n[1, 2, 3, 4] | [3, 4, 5, 6]       // [1, 2, 3, 4, 5, 6]\r\n[1, 2, 3, 4] & [3, 4, 5, 6]       // [3, 4]\r\n[1, 2, 3, 4] - [3, 4, 5, 6]       // [1, 2]\r\n[1, 2, 3, 4] ^ [3, 4, 5, 6]       // [1, 2, 5, 6]\r\n[1, 2] * [3, 4]                   // [[1, 3], [1, 4], [2, 3], [2, 4]]\r\n[1, 2] * 3                        // [1, 2, 1, 2, 1, 2]\r\n[1, 2, 3, 4] * \", \"               // \"1, 2, 3, 4\"\r\n\r\n[[1, 2, 3], [4, 5, 6]].transpose()  // [[1, 4], [2, 5], [3, 6]]\r\n\r\nlet sub1 = [4, 5]\r\nlet sub2: [Any?] = [8, nil]\r\nlet sub3: [Any?] = [nil]\r\nlet sub4: [Any?] = [7, sub2, [9], sub3]\r\nvar arr: [Any?] = [1, 2, sub1, 6, sub4]\r\n\r\narray.unwrapped()                // [1, 2, [4, 5], 6, [Optional(7), Optional([Optional(8), nil]), Optional([9]), Optional([nil])]]\r\narray.deepUnwrapped()            // [1, 2, [4, 5], 6, 7, [9]]\r\n\r\narray.compact()                  // [Optional(1), Optional(2), Optional([4, 5]), Optional(6), Optional([Optional(7), Optional([Optional(8), nil]), Optional([9]), Optional([nil])])]\r\narray.deepCompact()              // [Optional(1), Optional(2), Optional([4, 5]), Optional(6), Optional(7), Optional(8), Optional([9])]\r\n\r\n[\"a\", \"b\", \"c\", \"d\"].rotate()    // [\"b\", \"c\", \"d\", \"a\"]\r\n[\"a\", \"b\", \"c\", \"d\"].rotate(-2)  // [\"c\", \"d\", \"a\", \"b\"]\r\n\r\n[\"a\", \"b\", \"c\", \"d\"].sample()    // \"c\"\r\n[\"a\", \"b\", \"c\", \"d\"].shuffle()   // [\"b\", \"c\", \"d\", \"a\"]\r\n```\r\n\r\n### Number extensions\r\n\r\n```swift\r\n1.0.abs()         // 1.0\r\n-1.0.abs()        // 1.0\r\n\r\n7.seconds()       // 7.0\r\n6.minutes()       // 360.0\r\n5.hours()         // 18000.0\r\n4.days()          // 345600.0\r\n3.weeks()         // 1814400.0\r\n2.months()        // 5184000.0\r\n1.years()         // 31536000.0\r\n\r\n3.hours().ago()\r\n3.hours().sinceNow()\r\n\r\nlet time = 3.hours().ago()\r\n3.hours().until(time)\r\n3.hours().since(time)\r\n\r\n5.times()         // [0, 1, 2, 3, 4, 5]\r\n5.times {\r\n  print(\"Invoke callback\")\r\n}\r\n\r\n3.upTo(5)         // [3, 4, 5]\r\n3.upTo(5) {\r\n  print(\"Invoke callback\")\r\n}\r\n\r\n3.downTo(1)       // [3, 2, 1]\r\n3.downTo(1) {\r\n  print(\"Invoke callback\")\r\n}\r\n\r\n1.next()          // 2\r\n1.pred()          // 0\r\n\r\n1.abs()           // 1\r\n-1.abs()          // 1\r\n\r\n15.toF()           // 15.0\r\n15.toS()           // \"15\"\r\n75.toS(2)          // \"1001011\"\r\n75.toS(8)          // \"113\"\r\n75.toS(16)                        // \"4B\"\r\n75.toS(16, uppercase: false)      // \"4b\"\r\n\r\n3.isEven()         // false\r\n3.isOdd()          // true\r\n\r\n21.gcd(6)          // 3\r\n21.lcm(6)          // 42\r\n```\r\n\r\n### String extensions\r\n\r\n```swift\r\nvar str = \"Hello, World!\"\r\n\r\nstr.length          // 13\r\nstr[1]              // \"e\"\r\nstr[-1]             // \"!\"\r\nstr[1...4]          // \"ello\"\r\n\r\nstr.reverse()       // \"!dlroW ,olleH\"\r\n\r\nstr.split()         // [\"H\", \"e\", \"l\", \"l\", \"o\", \",\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]\r\nstr.split(\", \")     // [\"Hello\", \"World!\"]\r\n\r\nstr.index(\"l\")      // 2\r\n\r\nstr * 2                   // \"Hello, World!Hello, World!\"\r\nstr << \" You're good\"     // \"Hello, World! You're good\"\r\nstr << 33                 // \"Hello, World! You're good!\"\r\n\r\nlet match: String? = str =~ \"\\\\w+\"          // \"Hello\"\r\nlet matches: [String] = str =~ \"\\\\w+\"       // [\"Hello\", \"World\"]\r\n```\r\n\r\n[CocoaPods]: https://cocoapods.org\r\n[Podfile]: https://guides.cocoapods.org/using/the-podfile.html",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}